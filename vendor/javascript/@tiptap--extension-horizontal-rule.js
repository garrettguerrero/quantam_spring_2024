import{mergeAttributes as t,nodeInputRule as e,Node as o}from"@tiptap/core";import{TextSelection as n,NodeSelection as r}from"@tiptap/pm/state";const s=o.create({name:"horizontalRule",addOptions(){return{HTMLAttributes:{}}},group:"block",parseHTML(){return[{tag:"hr"}]},renderHTML({HTMLAttributes:e}){return["hr",t(this.options.HTMLAttributes,e)]},addCommands(){return{setHorizontalRule:()=>({chain:t,state:e})=>{const{$to:o}=e.selection;const s=t();o.parentOffset===0?s.insertContentAt(Math.max(o.pos-2,0),{type:this.name}):s.insertContent({type:this.name});return s.command((({tr:t,dispatch:e})=>{var o;if(e){const{$to:e}=t.selection;const s=e.end();if(e.nodeAfter)e.nodeAfter.isTextblock?t.setSelection(n.create(t.doc,e.pos+1)):e.nodeAfter.isBlock?t.setSelection(r.create(t.doc,e.pos)):t.setSelection(n.create(t.doc,e.pos));else{const r=(o=e.parent.type.contentMatch.defaultType)===null||o===void 0?void 0:o.create();if(r){t.insert(s,r);t.setSelection(n.create(t.doc,s+1))}}t.scrollIntoView()}return true})).run()}}},addInputRules(){return[e({find:/^(?:---|â€”-|___\s|\*\*\*\s)$/,type:this.type})]}});export{s as HorizontalRule,s as default};

